version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: portfolio_coach
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: portfolio_password
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio_coach"]
      interval: 10s
      timeout: 5s
      retries: 5

  portfolio_coach:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - DATABASE_URL=postgresql://portfolio_user:portfolio_password@postgres:5432/portfolio_coach
      - UPSTOX_ACCESS_TOKEN=${UPSTOX_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_TO=akshay.nambiar7@gmail.com
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
    command: ["python", "run.py", "--mode", "runner"]

  portfolio_web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - DATABASE_URL=postgresql://portfolio_user:portfolio_password@postgres:5432/portfolio_coach
      - UPSTOX_ACCESS_TOKEN=${UPSTOX_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
    command: ["python", "run.py", "--mode", "web"]

  portfolio_frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      portfolio_web:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Airflow services
  airflow-webserver:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://portfolio_user:portfolio_password@postgres:5432/portfolio_coach
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-your-fernet-key-here}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY:-your-secret-key-here}
      - DATABASE_URL=postgresql://portfolio_user:portfolio_password@postgres:5432/portfolio_coach
      - UPSTOX_ACCESS_TOKEN=${UPSTOX_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_TO=akshay.nambiar7@gmail.com
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../dags:/opt/airflow/dags
      - ../logs:/opt/airflow/logs
      - ../plugins:/opt/airflow/plugins
    command: ["airflow", "webserver"]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://portfolio_user:portfolio_password@postgres:5432/portfolio_coach
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-your-fernet-key-here}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - DATABASE_URL=postgresql://portfolio_user:portfolio_user:portfolio_password@postgres:5432/portfolio_coach
      - UPSTOX_ACCESS_TOKEN=${UPSTOX_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_TO=akshay.nambiar7@gmail.com
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    volumes:
      - ../dags:/opt/airflow/dags
      - ../logs:/opt/airflow/logs
      - ../plugins:/opt/airflow/plugins
    command: ["airflow", "scheduler"]

volumes:
  postgres_data:
